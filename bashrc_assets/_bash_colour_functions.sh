
function check_integer() {
    local MYINT="$1"
    ### If not an integer - default to theme val 0
    local REX=^[0-9]*$
    if [[ "$MYINT" =~ $REX ]]; then
        #true # pass TODO: figure out annoying regex not
        echo "$MYINT"
    else
        #echo -e "$MYINT is not a valid no for THEME_VAR\nSetting to default theme"
        #echo "Setting to default theme"
        echo 0
    fi    
}

function check_theme_range() {
    local MYINT="$1"
    local MAX_LEN="$2"
    ### If not an integer - default to theme val 0
    ### check if integer is between 0 and number of max theme array index (in _bash_colour_defs.sh)
    if [ "$MYINT" -ge 0 -a "$MYINT" -lt "$MAX_LEN" ]; then
        echo "$MYINT"
    else
        #echo " $MYINT is not a valid index no for THEME_VAR"
        echo 0
    fi
}

function colsw(){
    ## switches theme color set by $THEME_VAR vals

    local NEWCOL_IDX=${1}

    ### If not an integer - default to theme val 0
    local NEWCOL_IDX=$(check_integer "${NEWCOL_IDX}")

    ### check if integer is between 0 and number of max theme array index (in _bash_colour_defs.sh)
    local NEWCOL_IDX=$(check_theme_range "${NEWCOL_IDX}" "$BARCOL_ARR_LEN")

    ### create failsafebackup first
    cp ~/custom_bashrc/theme_settings.sh ~/custom_bashrc/theme_settings_BACKUP.sh 
    local CURR_FULL_PROMPT=$(grep "SET_FULL_PROMPT=" ~/custom_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}')
    local CURRCOL_IDX=$(grep "SET_THEME_VAR=" ~/custom_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}')

    # This just replaced the existing one with the same one
    # change SET_PATH_COL in another function
    local CURRPATH_IDX=$(grep "SET_PATHCOL_VAR=" ~/custom_bashrc/theme_settings.sh | grep -v sed | tr '=' ' ' | awk '{print $2}' | sed 's/\"//g')

    ##################################################
cat << BACON > ~/custom_bashrc/theme_settings.sh
#!/bin/bash 

# Do not edit this file directly. It is set by the function col_sw()
SET_FULL_PROMPT=${CURR_FULL_PROMPT}
SET_THEME_VAR="${NEWCOL_IDX}"
SET_BARCOL="${BARCOL_ARR[${NEWCOL_IDX}]}"
SET_TXTCOL="${TXTCOL_ARR[${NEWCOL_IDX}]}"
SET_PATHCOL_VAR="${CURRPATH_IDX}"
SET_PATHCOL="${PATH_COLS_ARR[${CURRPATH_IDX}]}"
BACON
    ###################################################

    ### Debugging switch for when using theme_generator.py
    PRINTCOLVAR="ON"
    if [ $PRINTCOLVAR = "ON" ]; then
        PATHCOL_NAME=${PATH_COLS_ARR[${CURRPATH_IDX}]}
        BARCOL_NAME=${BARCOL_ARR[${THEME_VAR}]}
        TXTCOL_NAME=${TXTCOL_ARR[${THEME_VAR}]}
        echo "BARCOL = ${BARCOL_NAME}"
        echo "TXTCOL = ${TXTCOL_NAME}"
        echo "PATHCOL = ${PATHCOL_NAME}"
    fi

    source ~/custom_bashrc/_bashrc.sh
}

function colsw_path(){
    ## switches path color set by $PATH_COL_VAR val

    local NEWPATH_IDX=${1}

    ### If not an integer - default to theme val 0
    NEWPATH_IDX=$(check_integer "${NEWPATH_IDX}")

    ### check if integer is between 0 and number of max theme array index (in _bash_colour_defs.sh)
    NEWPATH_IDX=$(check_theme_range "${NEWPATH_IDX}" "$PATHCOLS_ARR_LEN")

    ### create failsafebackup first
    cp ~/custom_bashrc/theme_settings.sh ~/custom_bashrc/theme_settings_BACKUP.sh 

    local NEWPATH_COL="${PATH_COLS_ARR[${NEWPATH_IDX}]}"

    sed -i "/^SET_PATHCOL/d" ~/custom_bashrc/theme_settings.sh

    ##################################################
cat << CHEESE >> ~/custom_bashrc/theme_settings.sh
SET_PATHCOL_VAR="${NEWPATH_IDX}"
SET_PATHCOL="${NEWPATH_COL}"
CHEESE
    ###################################################
    echo "No of Themes: $BARCOL_ARR_LEN"
    source ~/custom_bashrc/_bashrc.sh
}

function col_set_fullprompt() {
    local CHOICE="$1"
    if [[ "$CHOICE" =~ (yes|no) ]]; then
        sed -i "s/SET_FULL_PROMPT=\".*\"/SET_FULL_PROMPT=\"${CHOICE}\"/" ~/custom_bashrc/theme_settings.sh
        source ~/.bashrc
    else
        echo "enter 'yes' or 'no'"
    fi
}


function col_cp_root(){
    ## copies .bashrc to root home
    sudo mv /root/.bashrc /root/.your_old_bashrc
    sudo cp -rf ~/custom_bashrc /root/
    sudo ln -s /root/custom_bashrc/_bashrc.sh /root/.bashrc
    sudo su root
    source /root/.bashrc
}

function col_ssh(){
    ## copies .bashrc to remote host specified by $1 commandline arg user@remotehost
    rsync -av ~/custom_bashrc ${1}:~/
    ssh -A "${1}" 'mv ~/.bashrc ~/.your_old_bashrc; ln -s ~/custom_bashrc/_bashrc.sh ~/.bashrc'
}

#############################
function virtualenv_min_info(){
    # Get Virtual Env and display in prompt
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        local venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        local venv=""
    fi
    [[ -n "$venv" ]] && echo "$venv"
}

function virtualenv_info(){
    local venv=$(virtualenv_min_info)
    [[ -n "$venv" ]] && echo "${BARCOL}─${TXTCOL}[${HIRed}$venv${TXTCOL}]"
}

function ssh_info(){
    # Get ssh-sess info and display in prompt
    if pstree -p | egrep --quiet --extended-regexp ".*sshd.*\($$\)"; then
        ssh_state="ssh"
    else
        ssh_state=""
    fi
    [[ -n "$ssh_state" ]] && echo "${BARCOL}─${TXTCOL}[${HIRed}${ssh_state}${TXTCOL}]"
}

function aws_info(){
    # Get aws profile info and display in prompt
    aws_profile="$(printenv AWS_PROFILE)"
    if [[ -n "${aws_profile}" ]]; then
        set_aws_profile=${aws_profile}
    else
        set_aws_profile=""
    fi
    [[ -n "$set_aws_profile" ]] && echo "${BARCOL}─${TXTCOL}[${HIRed}${set_aws_profile}${TXTCOL}]"
}

##################################
### returns the last 2 fields of the working directory
## for display in terminal titlebar
pwdtail () {
    pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}' #TODO: Use for something?
}
