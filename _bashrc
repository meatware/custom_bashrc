# .bashrc


#if [ -f ~/.bashrc ]; then
#   . ~/.bashrc
#fi

# Source global definitions
# Enable programmable completion features.
if [ -f /etc/bash_completion ]; then
    source /etc/bash_completion
fi

# Source bashrc assets
. $HOME/custom_bashrc/bashrc_assets/_bash_colour_functions
. $HOME/custom_bashrc/bashrc_assets/_bash_helper_functions
###. HOME/bashrc_assets/_bash_colour_defs
. $HOME/custom_bashrc/bashrc_assets/_bash_git_functions
. $HOME/custom_bashrc/bashrc_assets/_bash_aliases



#################################################################
#################################################################
#################################################################

####################################
# pushing bash prompt remotely:
# https://superuser.com/questions/221001/pushing-my-ps1-prompt-over-ssh
#ssh -t user@host "remote='$PS1' bash -i"
#Then, at the prompt:
#PS1=$remote
#####################
# guides
# http://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/
# see https://github.com/nojhan/liquidprompt
# http://www.askapache.com/linux/bash-power-prompt/
# history guide: https://www.digitalocean.com/community/tutorials/how-to-use-bash-history-commands-and-expansions-on-a-linux-vps
# see http://brettterpstra.com/2009/11/17/my-new-favorite-bash-prompt/
# generate hostname color depending on name:
# https://serverfault.com/questions/221108/different-color-prompts-for-different-machines-when-using-terminal-ssh
# https://www.maketecheasier.com/more-useful-and-interesting-bash-prompts/ # megafancyprompt

# colors:
# http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux
# http://blog.taylormcgann.com/tag/prompt-color/
#################################################################
#################################################################
#################################################################
### To optimize gedit calls from the terminal.







##################################
### git branch functions
# check https://github.com/magicmonty/bash-git-prompt
# http://stackoverflow.com/questions/2657935/checking-for-a-dirty-index-or-untracked-files-with-git
# https://github.com/jimeh/git-aware-prompt/blob/master/prompt.sh

#############################
function virtualenv_info(){
    # Get Virtual Env
    if [[ -n "$VIRTUAL_ENV" ]]; then
        # Strip out the path and just leave the env name
        venv="${VIRTUAL_ENV##*/}"
    else
        # In case you don't have one activated
        venv=''
    fi
    [[ -n "$venv" ]] && echo "${BARCOL}──${TXTCOL}[${HIRed}venv: $venv${TXTCOL}]"
}


##################################
### last command timer
function timer_start {
  timer=${timer:-$SECONDS}
}

function timer_stop {
  timer_show=$(($SECONDS - $timer))
  unset timer
}

#trap 'timer_start' DEBUG

##################################
### returns the last 2 fields of the working directory
pwdtail () {
    pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}
#################################################################
#################################################################
#################################################################

# User specific aliases and functions
HISTSIZE=5000
HISTFILESIZE=10000
shopt -s histappend

color_prompt=no
if [ "$color_prompt" = no ]; then
# https://www.askapache.com/linux/bash-power-prompt/
#    echo "no color"
#    #PROMPT_COMMAND="FUNCpromptCommand"
#    function prompt_command() {
#        PS1="[\d \t \u@\h:\w ] $ "
#    }

function prompt_command ()
{
   local colors=`tput colors 2>/dev/null||echo -n 1` C=;

   if [[ $colors -ge 256 ]]; then
      C="`tput setaf 33 2>/dev/null`";
      AA_P='mf=x mt=x n=0; while [[ $n < 1 ]];do read a mt a; read a mf a; (( n++ )); done</proc/meminfo; export AA_PP="\033[38;5;2m"$((mf/1024))/"\033[38;5;89m"$((mt/1024))MB; unset -v mf mt n a';
   else
      C="`tput setaf 4 2>/dev/null`";
      AA_P='mf=x mt=x n=0; while [[ $n < 1 ]];do read a mt a; read a mf a; (( n++ )); done</proc/meminfo; export AA_PP="\033[92m"$((mf/1024))/"\033[32m"$((mt/1024))MB; unset -v mf mt n a';
   fi;

   eval $AA_P;

   PROMPT_COMMAND='stty echo; history -a; echo -en "\e[34h\e[?25h"; (($SECONDS % 2==0 )) && eval $AA_P; echo -en "$AA_PP";';
   SSH_TTY=${SSH_TTY:-`tty 2>/dev/null||readlink /proc/$$/fd/0 2>/dev/null`}

   PS1="\[\e[m\n\e[1;30m\][\$\$:\$PPID \j:\!\[\e[1;30m\]]\[\e[0;36m\] \T \d \[\e[1;30m\][${C}\u@\H\[\e[1;30m\]:\[\e[0;37m\]${SSH_TTY/\/dev\/} \[\e[0;32m\]+${SHLVL}\[\e[1;30m\]] \[\e[1;37m\]\w\[\e[0;37m\]\n\\$ ";

   export PS1 AA_P PROMPT_COMMAND SSH_TTY
}

else
    echo "color"
    function prompt_command() {
        ###################################################
        ### identify success/fail status of last command
        ### DO NOT MOVE THIS COMMAND: must be first!
        local last_status=$?
        ###################################################
        ###################################################
        #timer_stop
        ###################################################

        local MORANGE="\[\033[38;5;202m\]"
        local DORANGE="\[\033[38;5;221m\]"
        local YELLOW="\[\033[01;38;5;221m\]"
        local TEAL="\[\033[0;5;36m\]"
        local BCYAN="\[\033[1;5;36m\]"
        local LBLUE="\[\033[0;1;34m\]"
        local VBLUE="\[\033[0;5;34m\]"
        local VLBLUE="\[\033[1;5;34m\]"
        local GRAY="\[\033[0;37m\]"
        local DKGRAY="\[\033[1;30m\]"
        local WHITE="\[\033[1;37m\]"
        local TERGREEN="\[\033[00m\]"
        local RED="\[\033[1;5;31m\]"
        local CHATREU="\[\033[1;5;32m\]"
        local LGREEN="\[\033[1;2;32m\]"
        local SLATE="\[\033[1;2;37m\]"
        local LYELLOW="\[\033[1;33m\]"
        local LMAGENTA="\[\033[1;35m\]"
        local MAGENTA="\[\033[1;5;35m\]"
        ###
        # High Intensty
        local HIBlack="\[\033[0;90m\]"
        local HIRed="\[\033[0;5;91m\]"
        local HIGreen="\[\033[0;92m\]"
        local HIYellow="\[\033[0;5;93m\]"
        local HIBlue="\[\033[0;94m\]"
        local HIPurple="\[\033[0;95m\]"
        local HICyan="\[\033[0;96m\]"
        local HIWhite="\[\033[0;97m\]"

        local TITLEBAR=`pwdtail`
        local TTY_VAR=`tty 2> /dev/null | awk -F/ '{nlast = NF 0;print $nlast$NF": "}'`

        ###################################################
        ### Setup if else for different color themes
        # Turn the prompt symbol red if the user is root
        THEME_VAR=0

        if [[ THEME_VAR -eq 0 ]]; then
            ### local color
            local BARCOL="${DORANGE}"
            local TXTCOL="${MORANGE}"
        elif [[ THEME_VAR -eq 1 ]]; then
            local BARCOL="${LBLUE}"
            local TXTCOL="${TEAL}"
        elif [[ THEME_VAR -eq 2 ]]; then
            local BARCOL="${BCYAN}"
            local TXTCOL="${SLATE}"
        elif [[ THEME_VAR -eq 3 ]]; then
            local BARCOL="${SLATE}"
            local TXTCOL="${CHATREU}"
        elif [[ THEME_VAR -eq 4 ]]; then
            local BARCOL="${LBLUE}"
            local TXTCOL="${LMAGENTA}"
        elif [[ THEME_VAR -eq 5 ]]; then
            local BARCOL="${LGREEN}"
            local TXTCOL="${CHATREU}"
        elif [[ THEME_VAR -eq 6 ]]; then
            local BARCOL="${VBLUE}"
            local TXTCOL="${VLBLUE}"
        elif [[ THEME_VAR -eq 7 ]]; then
            local BARCOL="${HIRed}"
            local TXTCOL="${HIYellow}"
        elif [[ THEME_VAR -eq 8 ]]; then
            local BARCOL="${HIPurple}"
            local TXTCOL="${HIBlue}"
        elif [[ THEME_VAR -eq 9 ]]; then
            local BARCOL="${TERGREEN}"
            local TXTCOL="${HICyan}"
        else
            local BARCOL="${DORANGE}"
            local TXTCOL="${MORANGE}"
            echo -e '\n\nbash color prompt idx not recognised!!\n Default theme will be set...\n\n\n'
            ### switch to default local color
            colsw 0 # switch back to 0
        fi

        ###################################################
        ### root stuff
        if [[ $(id -u) -eq 0 ]]; then
            ### root color
            local BARCOL="${MORANGE}"
            local TXTCOL="${RED}"
            local ENDBIT="#"
        else
            local ENDBIT="$"
        fi # root bit

        ###################################################
        ### set virtual environment if applicable

        # disable the default virtualenv prompt change
        export VIRTUAL_ENV_DISABLE_PROMPT=1

        VIRTENV=$(virtualenv_info)


        ###################################################
        ### set color coded error string for prompt depending on success of last command
        if [[ $last_status == "0" ]]; then
            ERRPROMPT="\[\033[1;5;32m\]${ENDBIT} "
        else
            ERRPROMPT='\[\033[1;5;31m\]X '
        fi

        ###################################################
        ### set titlebar
        echo -ne '\033]2;'${TTY_VAR}${TITLEBAR}'\007'



## move out of tabs to avoid formatting horror (still in function)
PS1="${debian_chroot:+($debian_chroot)}\n\
${YELLOW}${BARCOL}┌──\
${TXTCOL}[\u]\
${BARCOL}──\
${TXTCOL}[\H]\
${BARCOL}──\
${TXTCOL}[speed: ${timer_show}s]\
$(parse_git)\
${VIRTENV}
${BARCOL}│${DKGRAY}${TTY_VAR}${WHITE}> \w \
\n${BARCOL}└──\
${TXTCOL}`date +"%H:%M"`\
${BARCOL}──\
${ERRPROMPT}${TERGREEN}"
    # end of function prompt_command()
    }
fi # if/else on color_prompt=yes/no

# option to switch to export history to all terminals
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history

exp_history="no"
if [ "$exp_history" = "yes" ]; then
    PROMPT_COMMAND="prompt_command; history -a; history -c; history -r"
else
#trap 'timer_start' DEBUG
#timer_stop;
    PROMPT_COMMAND="prompt_command"
fi



#################################################################
#################################################################
#################################################################
#if [ "$TERM" != "dumb" ]; then
#    [ -e "$HOME/.dircolors" ] && DIR_COLORS="$HOME/.dircolors"
#    [ -e "$DIR_COLORS" ] || DIR_COLORS=""
#    eval "`dircolors -b $DIR_COLORS`"
#fi
#####


export VISUAL=vim
EDITOR=vim
export EDITOR

